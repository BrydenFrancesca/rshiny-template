# This references a standard debian container from the
# Docker Hub https://registry.hub.docker.com/_/debian/
# Read more about containers on our dev center
# http://devcenter.wercker.com/docs/containers/index.html
box:
    id: quay.io/mojanalytics/analytics-ci
    tag: latest
    registry: quay.io
# You can also use services such as databases. Read more on our dev center:
# http://devcenter.wercker.com/docs/services/index.html
# services:
    # - postgres
    # http://devcenter.wercker.com/docs/services/postgresql.html

    # - mongo
    # http://devcenter.wercker.com/docs/services/mongodb.html

# This is the build pipeline. Pipelines are the core of wercker
# Read more about pipelines on our dev center
# http://devcenter.wercker.com/docs/pipelines/index.html
pre-build:
    # Steps make up the actions in your pipeline
    # Read more about steps on our dev center:
    # http://devcenter.wercker.com/docs/steps/index.html
  steps:
    - script:
      name: create or update ECR Docker repository
      code: |
        aws configure set default.region ${AWS_REGION}
        if ! aws ecr describe-repositories --repository-names ${WERCKER_GIT_REPOSITORY} > /dev/null 2>&1; then aws ecr create-repository --repository-name ${WERCKER_GIT_REPOSITORY}; fi

build:
  box:
    id: rocker/shiny
    tag: latest
  steps:
    - script:
      name: copy application to webroot
      code: |
        rm -rf /srv/shiny-server/*
        cp -R * /srv/shiny-server/

    - script:
      name: export image tag
      code: export DOCKER_TAG=$(echo $WERCKER_GIT_COMMIT | tr -c1-8)

    - internal/docker-push:
      aws-access-key: $AWS_ACCESS_KEY_ID
      aws-secret-key: $AWS_SECRET_ACCESS_KEY
      aws-region: $AWS_REGION
      aws-registry-id: $AWS_REGISTRY_ID
      repository: $WERCKER_GIT_REPOSITORY
      tag: $DOCKER_TAG

deploy:
  steps:
    - script:
      name: create kubeconfig file
      code: |
        mkdir ~/.kube
        cat <<EOF > ~/.kube/config
        apiVersion: v1
        clusters:
        - cluster:
            certificate-authority-data: ${K8S_CA_DATA}
            server: ${K8S_SERVER}
          name: ${K8S_NAME}
        contexts:
        - context:
            cluster: ${K8S_NAME}
            user: ${K8S_NAME}
          name: ${K8S_NAME}
        current-context: ${K8S_NAME}
        kind: Config
        preferences: {}
        users:
        - name: ${K8S_NAME}
          user:
            client-certificate-data: ${K8S_CLIENT_CERT}
            client-key-data: ${K8S_CLIENT_KEY}
            password: ${K8S_PASSWORD}
            username: ${K8S_USERNAME}
        EOF

    - script:
      name: get pods
      code: kubectl get pods --all-namespaces
